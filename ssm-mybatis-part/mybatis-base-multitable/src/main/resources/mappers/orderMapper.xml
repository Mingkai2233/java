<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace等于mapper接口类的全限定名,这样实现对应 -->
<mapper namespace="org.example.mapper.OrderMapper">
    <!-- 创建resultMap实现“对一”关联关系映射 -->
    <!-- id属性：通常设置为这个resultMap所服务的那条SQL语句的id加上“ResultMap” -->
    <!-- type属性：要设置为这个resultMap所服务的那条SQL语句最终要返回的类型 -->
    <resultMap id="getOrderAndCustomerResultMap" type="org.example.pojo.Order">
        <!-- 先设置Order自身属性和字段的对应关系 -->
        <id column="order_id" property="orderId"/>
        <result column="order_name" property="orderName"/>
        <!-- 使用association标签配置“对一”关联关系 -->
        <!-- property属性：在Order类中对一的一端进行引用时使用的属性名 -->
        <!-- javaType属性：一的一端类的全类名 -->
        <association property="customer" javaType="org.example.pojo.Customer">
            <!-- 配置Customer类的属性和字段名之间的对应关系 -->
            <id column="customer_id" property="customerId"/>
            <result column="customer_name" property="customerName"/>
        </association>
    </resultMap>
    <resultMap id="getCustomerWithOrderResultMapper" type="org.example.pojo.Customer">
        <id column="customer_id" property="customerId"/>
        <result column="customer_name" property="customerName"/>
        <collection property="orders" ofType="org.example.pojo.Order">
            <id column="order_id" property="orderId"/>
            <result column="order_name" property="orderName"/>
        </collection>
    </resultMap>

    <select id="getOrderWithCustomer" resultMap="getOrderAndCustomerResultMap">
        SELECT * FROM t_order o JOIN t_customer c ON o.customer_id = c.customer_id
            WHERE o.order_id = #{id};
    </select>
    <select id="getCustomerWithOrder" resultMap="getCustomerWithOrderResultMapper">
        SELECT * FROM t_customer c JOIN t_order o ON c.customer_id = o.customer_id
            WHERE c.customer_id = #{id};
    </select>
</mapper>